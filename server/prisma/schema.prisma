// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserType {
  ADMIN
  USER
}

enum Module {
  VAULT
  FINANCIALS
  REPORTING
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}

model User {
  id            String  @id @default(uuid())
  email         String  @unique
  name          String?

  isVerified    Boolean @default(false) // todo: note: ensure only admin can verify a user
  userType      UserType @default(USER)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt


  magicLinks    MagicLink[]
  userSession   UserSession[]
  userGroups    UserGroup[] 

  tenantId      String?
  tenant        Tenant? @relation(fields: [tenantId], references: [id])

  
  teamId        String?
  team          Team? @relation(fields: [teamId], references: [id])

  @@index([tenantId])
  @@index([teamId])
}

model Tenant {
  id        String   @id @default(uuid())
  name      String

  teams Team[]
  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@unique([name])
}

model Team {
  id        String   @id @default(uuid())
  name      String

  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  users  User[]
  groups Group[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, name])
  @@index([tenantId])
}

model MagicLink {
  id          String @id @default(uuid())
  userId      String
  
  expiresAt   DateTime
  isUsed      Boolean @default(false)

  user        User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserSession {
    id          String  @id @default(uuid())
    userId      String
    expiresAt   DateTime

    user        User @relation(fields: [userId], references: [id])

    @@index([userId])
}

model Group {
  id          String   @id @default(uuid())
  name        String
  teamId      String
  
  userGroups     UserGroup[]
  groupRoles     GroupRole[]
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([teamId, name])
  @@index([teamId])
}


model UserGroup {
  id      String @id @default(uuid())
  userId  String
  groupId String
  
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
}

model Role {
  id          String   @id @default(uuid())
  name        String
  description String?
  
  rolePermissions RolePermission[]
  groupRoles  GroupRole[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model GroupRole {
  id      String @id @default(uuid())
  groupId String
  roleId  String
  
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role    Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([groupId, roleId])
  @@index([groupId])
  @@index([roleId])
}

model Permission {
  id          String @id @default(uuid())
  module      Module
  action      Action
  name        String
  description String?

  rolePermissions RolePermission[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([module, action])
}

model RolePermission {
  id           String @id @default(uuid())
  roleId       String
  permissionId String
  
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}


